- in index connect express application to the mongoose database DONE
- initialise the app on port in index DONE
- add route not found router to middlewear DONE
- add request logger middlewear DONE
- add login route DONE
- add login route tests DONE
- read the chatgtp rec for next action
- complete the socket.io tutorial DONE
- create mvp frontend to connect server socket with single chatroom DONE
- Create a box for the chat room frontend DONE

- save messages to mongo to persist history DONE
- create message route to retrieve all messages at start DONE
- update message json structure to use 'content' across application DONE
- set up frontend to retrieve messages on first render DONE
- display date and time of the message DONE
- require users to sign-in and include user details with chat message DONE
- auth attribute on socket instance set after login with token and user details DONE
- add a client-side middlewear to ensure valid authorisation token valid with username on client-events DONE
- add 'connect_error' event handler client-side. Sent when next called with error in server middlewear and log out DONE
- add a notification box for the frontend DONE
- change the message initialisation to use an event instead DONE

- add a user registration page DONE
- notify the user when another user joins the chat DONE
- change the color of the message if a connect/disconnect message -- use type
- require a user object to be present to display the chatroom, if not show login DONE
- save user to the local-storage to ensure messages persist on refresh DONE
- add logout functionality
- make it so that enter sends message -- needs fresh eyes
- re-select text area after message sends
- add react error handling


- Add frontend functionality to join rooms 
- Add backend functionality to join rooms

USER ROUTE:
- test that a new user can be added postman DONE
- write error handlers for new user route DONE
- implement password strength checker DONE

USER TESTS:
- write tests for user router DONE 
  - write test for valid data DONE
  - write test for dup username DONE
  - write test for missing credentials DONE
  - write test for weak password DONE (fails)

LATER: 
- expand user details to include DOB and fullname
- add user restrictions based on age?
- integrate hatespeach api
- add dynamic username validation checker for registration
- integrate a chat gtp analysis of the chat, with different perception predispositions eg. 'interperet as hostile, interperet as loving'
  - could be an art-piece about how our predispositions affects our interpretation of events
  - eg 'interperet this as if ive been brought up by emotionally volatile parents' 
- a game where a certain number of people enter a chat, alongside a chat gtp bot. People are against the bot and have to vote on who the bot is