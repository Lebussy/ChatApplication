- in index connect express application to the mongoose database DONE
- initialise the app on port in index DONE
- add route not found router to middlewear DONE
- add request logger middlewear DONE
- add login route DONE
- add login route tests DONE
- read the chatgtp rec for next action
- complete the socket.io tutorial DONE
- create mvp frontend to connect server socket with single chatroom DONE
- Create a box for the chat room frontend DONE

- save messages to mongo to persist history DONE
- create message route to retrieve all messages at start DONE
- update message json structure to use 'content' across application DONE
- set up frontend to retrieve messages on first render DONE
- display date and time of the message DONE
- require users to sign-in and include user details with chat message DONE
- auth attribute on socket instance set after login with token and user details DONE
- add a client-side middlewear to ensure valid authorisation token valid with username on client-events DONE
- add 'connect_error' event handler client-side. Sent when next called with error in server middlewear and log out DONE
- add a notification box for the frontend DONE
- change the message initialisation to use an event instead DONE

- add a user registration page DONE
- notify the user when another user joins the chat DONE
- require a user object to be present to display the chatroom, if not show login DONE
- save user to the local-storage to ensure messages persist on refresh DONE
- add logout functionality DONE
- add react error handling (Happens locally in component) DONE 
- fix xhr poll error message when network disconnect DONE
- make it so that enter sends message DONE 
- make the connection messages more persistant DONE
- change the color of the message if a connect/disconnect message DONE
- show how many users online DONE
  - add a roominfo div to display the room name and the users currently connected DONE
  - add a counter to the backend to keep track of number of online users DONE
  - add an increment for users count to keep track of number of online users DONE
    - event handler for initial user count DONE
    - update the user count when user disconnects frontend DONE
  - frontend user count updates when user disconnects or connects DONE
- add a message type to message model DONE
- message type set to message for messages from users DONE
- message type set to info for connection messages DONE
- connection messages persisted to database DONE
- change the css for an info message
- make messages from the current user a diff color




- Add frontend functionality to join rooms 
  -List of rooms shows live how many members connected

- Add backend functionality to join rooms

USER ROUTE:
- test that a new user can be added postman DONE
- write error handlers for new user route DONE
- implement password strength checker DONE

USER TESTS:
- write tests for user router DONE 
  - write test for valid data DONE
  - write test for dup username DONE
  - write test for missing credentials DONE
  - write test for weak password DONE (fails)

LATER: 
- switch to redis to store the online users counter
- think about the guarantee of message order with mongo and if better solution needed frontend
- expand user details to include DOB and fullname
- add user restrictions based on age?
- integrate hatespeach api
- add dynamic username validation checker for registration
- integrate a chat gtp analysis of the chat, with different perception predispositions eg. 'interperet as hostile, interperet as loving'
  - could be an art-piece about how our predispositions affects our interpretation of events
  - eg 'interperet this as if ive been brought up by emotionally volatile parents' 
- a game where a certain number of people enter a chat, alongside a chat gtp bot. People are against the bot and have to vote on who the bot is